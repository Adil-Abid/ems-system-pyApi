from django.db import models


class dummy(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    email = models.EmailField()
    age = models.PositiveIntegerField()

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Company(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vnameurdu = models.TextField()
    address1 = models.TextField()
    address2 = models.TextField()
    addressurdu1 = models.TextField()
    addressurdu2 = models.TextField()
    sortorder = models.IntegerField()
    logo = models.ImageField(null=True, blank=True)
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Department(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vnameurdu = models.TextField()
    sortorder = models.IntegerField()
    groupid = models.IntegerField()
    strength = models.IntegerField()
    locationid = models.IntegerField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class DepartmentGroup(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vnameurdu = models.TextField()
    sortorder = models.IntegerField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Location(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vnameurdu = models.TextField()
    address = models.TextField()
    addressurdu = models.TextField()
    sortorder = models.IntegerField()
    logo = models.ImageField(null=True, blank=True)
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Designation(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vnameurdu = models.TextField()
    sortorder = models.IntegerField()
    groupid = models.IntegerField()
    defaultsalary = models.DecimalField(max_digits=18, decimal_places=0)
    locationid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class Grade(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vnameurdu = models.TextField()
    sortorder = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class Bank(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    branchname = models.TextField()
    accountnumber = models.TextField()
    accountmanager = models.TextField()
    iscash = models.IntegerField()
    sortorder = models.IntegerField()
    locationid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AllowDedCat(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    catid = models.IntegerField()
    vtype = models.TextField()
    sortorder = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AllowDed(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    vtype = models.TextField()
    amounttype = models.TextField()   
    catid = models.IntegerField()
    groupid = models.IntegerField()
    sortorder = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class AllowDedGroup(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    dependsupon = models.TextField()
    sortorder = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class AttCode(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    groupid = models.IntegerField()
    sortorder = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class AttGroup(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    parentid = models.IntegerField()
    vvalue = models.DecimalField(max_digits=10, decimal_places=2)
    pvalue = models.DecimalField(max_digits=10, decimal_places=2)
    isleave = models.BooleanField(default=True)
    issandwich = models.BooleanField(default=True)
    isoff = models.BooleanField(default=True)
    forleave = models.BooleanField(default=True)
    useinleavebalance = models.BooleanField(default=True)
    sortorder = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class Ramazan(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    datefrom = models.DateTimeField()
    dateto = models.DateTimeField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class Holiday(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    leavetypeid = models.IntegerField()
    vdate = models.DateTimeField()
    locationid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class LeaveBalance(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    attgroupid = models.IntegerField()
    datefrom = models.DateTimeField()
    dateto = models.DateTimeField()
    leavelimit = models.IntegerField()
    locationid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class EmployeeLeaveBalance(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    attgroupid = models.IntegerField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    datefrom = models.DateTimeField()
    dateto = models.DateTimeField()
    leavelimit = models.IntegerField()
    locationid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class Shift(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    timein = models.DecimalField(max_digits=10, decimal_places=2)
    timeout = models.DecimalField(max_digits=10, decimal_places=2)
    resttimefrom = models.DecimalField(max_digits=10, decimal_places=2)
    resttimeto = models.DecimalField(max_digits=10, decimal_places=2)
    workinghrs = models.DecimalField(max_digits=10, decimal_places=2)
    relaxtime = models.DecimalField(max_digits=10, decimal_places=2)
    minatttime = models.DecimalField(max_digits=10, decimal_places=2)
    minhdtime = models.DecimalField(max_digits=10, decimal_places=2)
    timeinramazan = models.DecimalField(max_digits=10, decimal_places=2)
    timeoutramazan = models.DecimalField(max_digits=10, decimal_places=2)
    resttimefromramazan = models.DecimalField(max_digits=10, decimal_places=2)
    resttimetoramazan = models.DecimalField(max_digits=10, decimal_places=2)
    workinghrsramazan = models.DecimalField(max_digits=10, decimal_places=2)
    relaxtimeramazan = models.DecimalField(max_digits=10, decimal_places=2)
    minatttimeramazan = models.DecimalField(max_digits=10, decimal_places=2)
    minhdtimeramazan = models.DecimalField(max_digits=10, decimal_places=2)
    isdaylight = models.BooleanField(default=True)
    daylightfrom = models.DateTimeField()
    daylightto = models.DateTimeField()
    timeindaylight = models.DecimalField(max_digits=10, decimal_places=2)
    timeoutdaylight = models.DecimalField(max_digits=10, decimal_places=2)
    resttimefromdaylight = models.DecimalField(max_digits=10, decimal_places=2)
    resttimetodaylight = models.DecimalField(max_digits=10, decimal_places=2)
    isroster = models.BooleanField(default=True)
    issecurity = models.BooleanField(default=True)
    saturdayhalftime = models.BooleanField(default=True)
    locationid = models.IntegerField()
    isactive = models.IntegerField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class SalaryIncrement(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField(blank=True)
    vno = models.TextField(blank=True)
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    datefrom = models.DateField()
    currentsalary = models.DecimalField(max_digits=18, decimal_places=0)
    incrementamount = models.DecimalField(max_digits=18, decimal_places=0)
    incrementspecial = models.DecimalField(max_digits=18, decimal_places=0)
    incrementpromotional = models.DecimalField(max_digits=18, decimal_places=0)
    firstamount = models.DecimalField(max_digits=18, decimal_places=0)
    currentdesgid = models.IntegerField(default=0)
    newdesgid = models.IntegerField(default=0)
    isposted = models.IntegerField(default=0)
    postedby = models.IntegerField(default=0)
    posteddate = models.DateTimeField(default='1900-01-01')
    iscanceled = models.IntegerField(default=0)
    canceledby = models.IntegerField(null=True)
    canceleddate = models.DateTimeField(null=True)
    isactive = models.BooleanField(default=True)    
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SalaryAllowDed(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField(blank=True)
    vno = models.TextField()
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    refno = models.TextField(default='-')
    allowdedid = models.IntegerField()
    qty = models.IntegerField(default=0)
    amount = models.DecimalField(max_digits=18, decimal_places=0)
    accountid = models.IntegerField(null=True)
    chequeno = models.TextField(null=True)
    chequedate = models.DateTimeField(null=True)
    financialyearid = models.IntegerField(null=True)
    isapproved = models.IntegerField(default=1)
    approvedby = models.IntegerField(default=1)
    approveddate = models.DateTimeField(default='1900-01-01')
    isposted = models.IntegerField(default=1)
    postedby = models.IntegerField(default=1)
    posteddate = models.DateTimeField(default='1900-01-01')
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SalaryLoan(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="id")
    vname = models.TextField(blank=True)
    vno = models.TextField()
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    refno = models.TextField(default='-')
    amount = models.DecimalField(max_digits=18, decimal_places=0)
    installment = models.DecimalField(max_digits=18, decimal_places=0)
    usedamount = models.DecimalField(max_digits=18, decimal_places=0,default=0)
    accountid = models.IntegerField(null=True)
    chequeno = models.TextField(null=True)
    chequedate = models.DateTimeField(null=True)
    financialyearid = models.IntegerField(null=True)
    isapproved = models.IntegerField(default=1)
    approvedby = models.IntegerField(default=1)
    approveddate = models.DateTimeField(default='1900-01-01')
    isposted = models.IntegerField(default=1)
    postedby = models.IntegerField(default=1)
    posteddate = models.DateTimeField(default='1900-01-01')
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SalaryLoanDeduction(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vno = models.TextField()
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    loanid = models.DecimalField(max_digits=18, decimal_places=0,null=True)
    refno = models.TextField()
    amount = models.DecimalField(max_digits=18, decimal_places=0)
    isapproved = models.IntegerField()
    approvedby = models.IntegerField()
    approveddate = models.DateTimeField()
    isposted = models.IntegerField()
    postedby = models.IntegerField()
    posteddate = models.DateTimeField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttMain(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    datein = models.DateTimeField()
    dateout = models.DateTimeField(null=True)
    shiftid = models.IntegerField()
    isclear = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)
    machineid = models.DecimalField(max_digits=18, decimal_places=0)
    machineid1 = models.DecimalField(max_digits=18, decimal_places=0)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttClosingDay(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    datein = models.DateTimeField()
    dateout = models.DateTimeField(null=True)
    shiftid = models.IntegerField()
    leavetypeid = models.IntegerField()
    overtime = models.DecimalField(max_digits=4, decimal_places=2)
    tottime = models.DecimalField(max_digits=4, decimal_places=2)
    ispayable = models.IntegerField()
    isoff = models.IntegerField()
    ignorelate = models.IntegerField()
    leavetypeidactual = models.IntegerField()
    changereason = models.TextField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttLeave(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vno = models.TextField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    datefrom = models.DateTimeField()
    dateto = models.DateTimeField(null=True)
    shiftid = models.IntegerField(default=0)
    leavetypeid = models.IntegerField()
    contactnumber = models.TextField(default='-')
    isapproved = models.IntegerField(default=0)
    approvedby = models.IntegerField(default=0)
    approveddate = models.DateTimeField(default='1900-01-01')
    isposted = models.IntegerField(default=0)
    postedby = models.IntegerField(default=0)
    posteddate = models.DateTimeField(default='1900-01-01')
    issys = models.IntegerField(default=1)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttLeaveSpecial(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vno = models.TextField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    vdate = models.DateTimeField()
    leavetypeid = models.IntegerField()
    contactnumber = models.TextField(default='-')
    isapproved = models.IntegerField(default=0)
    approvedby = models.IntegerField(default=0)
    approveddate = models.DateTimeField(default='1900-01-01')
    isposted = models.IntegerField(default=0)
    postedby = models.IntegerField(default=0)
    posteddate = models.DateTimeField(default='1900-01-01')
    issys = models.IntegerField(default=1)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttOT(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vno = models.TextField(default='-')
    vdate = models.DateTimeField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    overtime = models.DecimalField(max_digits=4, decimal_places=2)
    leavetypeid = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttOTMonth(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vno = models.TextField(default='-')
    vdate = models.DateTimeField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    overtime = models.DecimalField(max_digits=4, decimal_places=2)
    leavetypeid = models.IntegerField()
    isposted = models.IntegerField(default=0)
    posteddate = models.DateField(default='1900-01-01')
    postedby = models.IntegerField(default=1)
    iscanceled = models.IntegerField(default=0)
    canceleddate = models.DateField(default='1900-01-01')
    canceledby = models.IntegerField(default=1)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SalaryType(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class EmployeeType(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    sortorder = models.IntegerField()
    salarytypeid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Gender(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    sortorder = models.IntegerField()
    salarytypeid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Religion(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    sortorder = models.IntegerField()
    salarytypeid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Status(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vcode = models.TextField()
    vname = models.TextField()
    sortorder = models.IntegerField()
    salarytypeid = models.IntegerField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class EmpLocationTransfer(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    vno = models.TextField(blank=True)
    vdate = models.DateTimeField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    currentlocationid = models.IntegerField()
    locationid = models.IntegerField()
    isposted = models.IntegerField()
    postedby = models.IntegerField()
    posteddate = models.DateTimeField()
    isactive = models.BooleanField(default=True)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class Employee(models.Model):
    empid = models.BigAutoField(primary_key=True, verbose_name="ID")
    etypeid = models.IntegerField()
    locationid = models.IntegerField()
    empcode = models.TextField()
    acccode = models.TextField()
    machinecode = models.TextField(blank=True)
    ename = models.TextField()
    fname = models.TextField()
    deptid = models.IntegerField()
    desgid = models.IntegerField()
    hodid = models.DecimalField(max_digits=18, decimal_places=0, blank=True)
    dob = models.DateField()
    doj = models.DateField()
    dojact = models.DateField(default='1900-01-01')
    hiretype = models.TextField(null=True)
    jobtype = models.TextField(null=True)
    offday1 = models.IntegerField()
    offday2 = models.IntegerField()
    shiftid = models.IntegerField()
    nic = models.TextField()
    basicsalary = models.DecimalField(max_digits=10, decimal_places=0)
    actualsalary = models.DecimalField(max_digits=10, decimal_places=0, blank=True)
    managersalary = models.DecimalField(max_digits=18, decimal_places=0, blank=True)
    incometax = models.DecimalField(max_digits=18, decimal_places=0)
    haveot = models.BooleanField(default=True)
    haveotact = models.BooleanField(default=True)
    haveotoff = models.BooleanField(default=True)
    replacementof = models.TextField(blank=True)
    isbank = models.BooleanField(default=True)
    bankaccountno = models.TextField(blank=True)
    companybankid = models.IntegerField(blank=True)
    isactive = models.IntegerField()
    isactiveact = models.IntegerField()
    dol = models.DateField()
    dolact = models.DateField()
    leftremarks = models.TextField(blank=True)
    gradeid = models.IntegerField()
    probitionstatus = models.TextField(blank=True)
    probitiondate = models.DateTimeField()
    cellphone = models.TextField(blank=True)
    icephone = models.TextField(blank=True)
    address = models.TextField(blank=True)
    addresspermanent = models.TextField(blank=True)
    bloodgroup = models.TextField(blank=True)
    eobino = models.TextField(blank=True)
    eobinoact = models.TextField(blank=True)
    ssno = models.TextField(blank=True)
    lifeinsuranceno = models.TextField(blank=True)
    isgroupinsurance = models.BooleanField(default=True)
    martialstatus = models.TextField()
    ispfundentitled = models.BooleanField(default=True)
    pfundentitleddate = models.DateTimeField()
    ispfund = models.BooleanField(default=True)
    pfamount = models.DecimalField(max_digits=18, decimal_places=0, null=True, blank=True)
    ispessi = models.BooleanField(default=True)
    pessidate = models.DateTimeField()
    gender = models.TextField()
    religionid = models.IntegerField()
    isexempt = models.BooleanField(default=True)
    isshiftemployee = models.BooleanField(default=True)
    isshiftemployeeact = models.BooleanField(default=True)
    exemptlate = models.BooleanField(default=True)
    exemptminuts = models.IntegerField()
    education = models.TextField(null=True, blank=True)
    enameurdu = models.TextField(blank=True)
    fnameurdu = models.TextField(blank=True)
    addressurdu = models.TextField(blank=True)
    designationtitle = models.TextField(blank=True)
    oldcode = models.TextField(blank=True)
    mothername = models.TextField(blank=True)
    nexttokin = models.TextField(blank=True)
    istransport = models.BooleanField(default=True)
    transportdate = models.DateTimeField()
    transportroute = models.TextField(blank=True)
    transportlocation = models.TextField(blank=True)
    ismanager = models.BooleanField(default=True)
    isshowforaudit = models.BooleanField(default=True)
    isstopsalary = models.BooleanField(default=True)
    otrate = models.DecimalField(max_digits=4, decimal_places=0, blank=True)
    otrateoff = models.DecimalField(max_digits=4, decimal_places=0, blank=True)
    nicexpairy = models.DateTimeField()
    busdeduction = models.BooleanField(default=True)
    blacklist = models.BooleanField(default=True)
    uid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)
    companyid = models.IntegerField()

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecUser(models.Model):
    userid = models.BigAutoField(primary_key=True, verbose_name="ID")
    userfullname = models.TextField()
    userlogin = models.TextField()
    userpassword = models.TextField(max_length=50)
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    allowaudit = models.IntegerField()
    allowactual = models.IntegerField()
    ismanager = models.IntegerField()
    isadmin = models.IntegerField()
    issystemadmin = models.IntegerField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecRole(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecPage(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    srlno = models.TextField()
    vname = models.TextField()
    routingpage = models.TextField()
    menulevel = models.IntegerField()
    parentid = models.IntegerField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecRolePage(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    roleid = models.IntegerField()
    pageid = models.IntegerField()
    isview = models.IntegerField()
    isinsert = models.IntegerField()
    isupdate = models.IntegerField()
    isdelete = models.IntegerField()
    isbackdate = models.IntegerField()
    isprint = models.IntegerField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecUserCompany(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    userid = models.IntegerField()
    companyid = models.IntegerField()    
    isactive = models.IntegerField()
    uid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)
    
    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecUserLocation(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    userid = models.IntegerField()
    locationid = models.IntegerField()    
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecUserRole(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    userid = models.IntegerField()
    roleid = models.IntegerField()    
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SecUserPage(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    includeexclude = models.IntegerField()
    userid = models.IntegerField()
    pageid = models.IntegerField()
    isview = models.IntegerField()
    isinsert = models.IntegerField()
    isupdate = models.IntegerField()
    isdelete = models.IntegerField()
    isbackdate = models.IntegerField()
    isprint = models.IntegerField()
    isactive = models.IntegerField()
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class SalaryGratuity(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField(blank=True)
    vno = models.TextField()
    vdate = models.DateField()
    demanddate = models.DateField(default='1900-01-01')
    demandtill = models.DateField()
    paidtill = models.DateField()
    paidon = models.DateField(default='1900-01-01')
    paidold = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    basicsalary = models.DecimalField(max_digits=18, decimal_places=0, default=0)
    dueamount = models.DecimalField(max_digits=18, decimal_places=0)
    paidamount = models.DecimalField(max_digits=18, decimal_places=0)
    newamount = models.DecimalField(max_digits=18, decimal_places=0)
    gyearseffected = models.IntegerField(null=True)
    gyears = models.IntegerField(null=True)
    gmonths = models.IntegerField(null=True)
    isapproved = models.IntegerField(default=1)
    isposted = models.IntegerField(default=1)
    posteddate = models.DateTimeField(default='1900-01-01')    
    postedby = models.IntegerField(default=1)
    companybankid = models.IntegerField(null=True)
    chequeno = models.TextField(null=True)
    chequedate = models.DateTimeField(null=True)
    financialyearid = models.IntegerField(null=True)    
    iscancel = models.IntegerField(default=True)
    uid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)
    
class EmployeeTrial(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    empcode = models.TextField(default='-')
    ename = models.TextField()
    fname = models.TextField()
    deptid = models.IntegerField()
    shiftid = models.IntegerField()
    doj = models.DateTimeField()
    dob = models.DateTimeField()
    address = models.TextField(blank=True)
    reference = models.TextField(blank=True)
    telephone = models.TextField(blank=True)
    nic = models.TextField()
    closingdate = models.DateTimeField(default='1900-01-01')
    closingstatus = models.TextField(blank=True)
    closingremarks = models.TextField(blank=True)
    locationid = models.IntegerField(default=0)
    empidold = models.DecimalField(max_digits=18, decimal_places=0, default=0)
    empcodeold = models.TextField(default='-')
    machinecode = models.TextField(blank=True)
    actualempid = models.DecimalField(max_digits=18, decimal_places=0, default=0)
    hiretype = models.TextField()
    uid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)
    companyid = models.IntegerField()

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttLeaveDepartment(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField()    
    deptid = models.IntegerField()
    datefrom = models.DateField()
    dateto = models.DateField()
    leavetypeid = models.IntegerField()
    uid = models.IntegerField()
    locationid = models.IntegerField(default=0)
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttExemptLate(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    empid = models.DecimalField(max_digits=18, decimal_places=0) 
    deptid = models.IntegerField()
    locationid = models.IntegerField(default=0)
    companyid = models.IntegerField()
    vdate = models.DateField()
    vname = models.TextField()
    isposted = models.IntegerField(default=1)
    postedby = models.IntegerField(default=1)
    posteddate = models.DateField(default='1900-01-01')
    iscancel = models.IntegerField(default=0)
    uid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)    

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttRoster(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    vname = models.TextField() 
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    shiftid = models.IntegerField()
    isoff = models.IntegerField()    
    locationid = models.IntegerField(default=0)
    uid = models.IntegerField()
    companyid = models.IntegerField()
    tranzdatetime = models.DateTimeField(auto_now_add=True)    

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttEntryRosterMonth(models.Model):
    vid = models.BigAutoField(primary_key=True, verbose_name="ID")
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    empcode = models.TextField()
    ename = models.TextField(max_length=200)
    department = models.TextField(max_length=200)
    designation = models.TextField(max_length=200)
    d01 = models.CharField(max_length=10, null=True, blank=True)
    d02 = models.CharField(max_length=10, null=True, blank=True)
    d03 = models.CharField(max_length=10, null=True, blank=True)
    d04 = models.CharField(max_length=10, null=True, blank=True)
    d05 = models.CharField(max_length=10, null=True, blank=True)
    d06 = models.CharField(max_length=10, null=True, blank=True)
    d07 = models.CharField(max_length=10, null=True, blank=True)
    d08 = models.CharField(max_length=10, null=True, blank=True)
    d09 = models.CharField(max_length=10, null=True, blank=True)
    d10 = models.CharField(max_length=10, null=True, blank=True)
    d11 = models.CharField(max_length=10, null=True, blank=True)
    d12 = models.CharField(max_length=10, null=True, blank=True)
    d13 = models.CharField(max_length=10, null=True, blank=True)
    d14 = models.CharField(max_length=10, null=True, blank=True)
    d15 = models.CharField(max_length=10, null=True, blank=True)
    d16 = models.CharField(max_length=10, null=True, blank=True)
    d17 = models.CharField(max_length=10, null=True, blank=True)
    d18 = models.CharField(max_length=10, null=True, blank=True)
    d19 = models.CharField(max_length=10, null=True, blank=True)
    d20 = models.CharField(max_length=10, null=True, blank=True)
    d21 = models.CharField(max_length=10, null=True, blank=True)
    d22 = models.CharField(max_length=10, null=True, blank=True)
    d23 = models.CharField(max_length=10, null=True, blank=True)
    d24 = models.CharField(max_length=10, null=True, blank=True)
    d25 = models.CharField(max_length=10, null=True, blank=True)
    d26 = models.CharField(max_length=10, null=True, blank=True)
    d27 = models.CharField(max_length=10, null=True, blank=True)
    d28 = models.CharField(max_length=10, null=True, blank=True)
    d29 = models.CharField(max_length=10, null=True, blank=True)
    d30 = models.CharField(max_length=10, null=True, blank=True)
    d31 = models.CharField(max_length=10, null=True, blank=True)

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)

class AttClosingMonth(models.Model):
    vid = models.BigAutoField(primary_key=True)
    vname = models.TextField()
    vdate = models.DateField()
    empid = models.DecimalField(max_digits=18, decimal_places=0)
    empcode = models.TextField()
    ename = models.TextField()
    fname = models.TextField()
    deptid = models.IntegerField()
    department = models.TextField()
    desgid = models.IntegerField()
    designation = models.TextField()
    is_exempt = models.IntegerField()
    working_hrs = models.DecimalField(max_digits=18, decimal_places=2)
    doj = models.DateField()
    dol = models.DateField()
    nic = models.TextField()
    have_ot = models.BooleanField(null=True)
    shift_id = models.IntegerField()
    is_shift_employee = models.IntegerField()
    is_shift_open = models.IntegerField()
    is_stop_salary = models.BooleanField(null=True)
    is_bank = models.BooleanField(null=True)
    bank_account_no = models.TextField()
    company_bank_id = models.IntegerField()
    cheque_no = models.TextField()
    cheque_date = models.DateField()
    basic_salary = models.DecimalField(max_digits=18, decimal_places=0)
    salary_with_allow = models.DecimalField(max_digits=18, decimal_places=0)
    increment = models.DecimalField(max_digits=18, decimal_places=0)
    earned_salary = models.DecimalField(max_digits=18, decimal_places=0)
    arrears = models.DecimalField(max_digits=18, decimal_places=0)
    overtime = models.DecimalField(max_digits=18, decimal_places=2)
    overtime_rate = models.DecimalField(max_digits=18, decimal_places=2)
    overtime_rs = models.DecimalField(max_digits=18, decimal_places=0)
    overtime_off = models.DecimalField(max_digits=18, decimal_places=2)
    overtime_rate_off = models.DecimalField(max_digits=18, decimal_places=2)
    overtime_rs_off = models.DecimalField(max_digits=18, decimal_places=0)
    gross_salary = models.DecimalField(max_digits=18, decimal_places=0)
    eobi_amount = models.DecimalField(max_digits=18, decimal_places=0)
    pf_amount = models.DecimalField(max_digits=18, decimal_places=0)
    income_tax = models.DecimalField(max_digits=18, decimal_places=0)
    allowance = models.DecimalField(max_digits=18, decimal_places=0)
    allowance1 = models.DecimalField(max_digits=18, decimal_places=0)
    allowance2 = models.DecimalField(max_digits=18, decimal_places=0)
    allowance3 = models.DecimalField(max_digits=18, decimal_places=0)
    allowance4 = models.DecimalField(max_digits=18, decimal_places=0)
    allowance5 = models.DecimalField(max_digits=18, decimal_places=0)
    deduction = models.DecimalField(max_digits=18, decimal_places=0)
    deduction1 = models.DecimalField(max_digits=18, decimal_places=0)
    deduction2 = models.DecimalField(max_digits=18, decimal_places=0)
    deduction3 = models.DecimalField(max_digits=18, decimal_places=0)
    deduction4 = models.DecimalField(max_digits=18, decimal_places=0)
    deduction5 = models.DecimalField(max_digits=18, decimal_places=0)
    late_deduction = models.DecimalField(max_digits=18, decimal_places=0)
    early_deduction = models.DecimalField(max_digits=18, decimal_places=0)
    local_sale = models.DecimalField(max_digits=18, decimal_places=0)
    canteen = models.DecimalField(max_digits=18, decimal_places=0)
    buss_deduction = models.DecimalField(max_digits=18, decimal_places=0)
    net_payable = models.DecimalField(max_digits=18, decimal_places=0)
    month_days = models.DecimalField(max_digits=18, decimal_places=2)
    working_days = models.DecimalField(max_digits=18, decimal_places=2)
    deduction_days = models.DecimalField(max_digits=18, decimal_places=2)
    att_days = models.DecimalField(max_digits=18, decimal_places=2)
    physical_days = models.DecimalField(max_digits=18, decimal_places=2)
    salary_days = models.DecimalField(max_digits=18, decimal_places=2)
    pp_days = models.DecimalField(max_digits=18, decimal_places=2)
    hd_days = models.DecimalField(max_digits=18, decimal_places=2)
    gh_days = models.DecimalField(max_digits=18, decimal_places=2)
    fh_days = models.DecimalField(max_digits=18, decimal_places=2)
    we_days = models.DecimalField(max_digits=18, decimal_places=2)
    ab_days = models.DecimalField(max_digits=18, decimal_places=2)
    annual = models.DecimalField(max_digits=18, decimal_places=2)
    casual = models.DecimalField(max_digits=18, decimal_places=2)
    sick = models.DecimalField(max_digits=18, decimal_places=2)
    cpl = models.DecimalField(max_digits=18, decimal_places=2)
    ml_days = models.DecimalField(max_digits=18, decimal_places=2)
    special = models.DecimalField(max_digits=18, decimal_places=2)
    short = models.DecimalField(max_digits=18, decimal_places=2)
    half_day = models.DecimalField(max_digits=18, decimal_places=2)
    without_pay = models.DecimalField(max_digits=18, decimal_places=2)
    late_days = models.DecimalField(max_digits=18, decimal_places=2)
    sld_days = models.IntegerField()
    shl_days = models.IntegerField()
    financial_year_id = models.IntegerField()
    currency_id = models.IntegerField()
    exchange_id = models.IntegerField()
    exchange_rate = models.DecimalField(max_digits=18, decimal_places=4)
    is_posted = models.IntegerField()
    posted_date = models.DateField()
    posted_by = models.IntegerField()
    is_canceled = models.IntegerField()
    canceled_date = models.DateField()
    canceled_by = models.IntegerField()
    is_approved = models.IntegerField()
    approved_date = models.DateField()
    approved_by = models.IntegerField()
    is_clear = models.IntegerField()
    uid = models.IntegerField()
    company_id = models.IntegerField()
    tranzdatetime = models.DateTimeField()

    def save(self, *args, **kwargs):
        return super().save(*args, **kwargs)